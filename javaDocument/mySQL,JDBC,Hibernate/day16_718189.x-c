limitation of EM methods in performing CRUD operations:-
----------------------------------------------------------------------

persist();
find()
merge();
remove();



1.Retrieving Entity obj based on only ID field(PK field) @Id

2.multiple Entity obj retrival is not possible (multiple record)

3.bulk update and bulk delete is also not possible

4.to access Entity obj we can not specify some extra condition.


--to overcome the above limitation JPA has provided JPQL (java persistence query language).




similarities bt JPQL and sql:-
----------------------------------

--keywords in the both the langauges are case insensetive

--GROUP BY,ORDER BY,where clause r similar

--aggregrate function r similar

--the way we express the condition to perform the CRUD operation is almost simmilar.


diff bt JPQL and sql:-
--------------------------
--sql queries are expressed in the term of table and columns, where as jpql query is expressed in the term of Entity class names and its variables.

--the name of the class and its variables are case sensitive.

--sql is not portable across multiple dbms, where jpql is portable.


sql> select name,marks from student; (name and marks are the column name and student is the table name)

jpql> select name,marks from Student; (here name and marks are the variables defined inside the Student class)

Note: we should not use * in jpql: 
ex:

sql>select * from student;

jpql>from Student;
or
jpql>select s from Student s;





steps to use the jpql in JPA application:-
----------------------------------------------


step 1:- develop the JPQL query as string.

step 2:- create javax.persistnce.Query(I) object by calling "createQuery(-)" method on the EM object.

ex:-

Query q =em.createQuery("JPQL query");  

step 3:- bind the values if any placeholders are used.(here we have 2 types of place holders 1.positional 2.named placeholders).

step 4:- submit the jpql query by calling either one of the following methods:-

for select statments:-

List getResultList();   (if more than one record.)
Object getSingleResult();  (if atmost one record)


for insert/update/delete :-

int executeUpdate();  //this method should be called inside the tx area.

ex:-




in sql :-

select * from account;

in jpql:-

select a from Account a;

from Account;  //it is a shortcut


ex:- getting all the records from the DB:-
------------------------------------------------

JPQLMain.java:-
-------------------


public class JPQLMain {
	
	public static void main(String[] args) {
		
		EntityManager em= EMUtil.provideEntityManager();
		
		
		//String jpql= "select a from Account a";
		String jpql= "from Account";
		Query q= em.createQuery(jpql);
		
		List<Account> list= q.getResultList();
		
		for(Account acc:list){
			System.out.println(acc);
		}		
	}
}





search on non-pk:-
-----------------------

	EntityManager em= EMUtil.provideEntityManager();
		
		
		//String jpql= "select a from Account a where a.name='Ram' ";
		String jpql= "from Account where name='Ram'";
		Query q= em.createQuery(jpql);
		
		List<Account> list= q.getResultList();
		
		for(Account acc:list){
			System.out.println(acc);
		}	
	}


if we conform that only one row will come then :-
-------------------------------------------------------

	EntityManager em= EMUtil.provideEntityManager();
		
		
		//String jpql= "select a from Account a where a.name='Ram' ";
		String jpql= "from Account where name='Ram'";
		Query q= em.createQuery(jpql);
		
		//Object obj= q.getSingleResult();
		//Account acc= (Account)obj;
		
		Account acc= (Account)q.getSingleResult();
		
		System.out.println(acc);

--if the above query will return more that one result then it will throw a runtime exception

in order to avoid the downcasting problem we should use TypedQuery instead of Query obj.

--TypedQuery is the child interface of Query interface.

ex:-

		EntityManager em= EMUtil.provideEntityManager();
		
		
		//String jpql= "select a from Account a where a.name='Ram' ";
		String jpql= "from Account where name='Ram'";
		TypedQuery<Account> q= em.createQuery(jpql,Account.class);
		
		Account acc= q.getSingleResult();
		
		System.out.println(acc);





bulk update:-
------------------

		EntityManager em= EMUtil.provideEntityManager();
		
		String jpql= "update Account set balance=balance+500";
		
		Query q= em.createQuery(jpql);
		
		em.getTransaction().begin();
		int x= q.executeUpdate();
		em.getTransaction().commit();
		
		System.out.println(x+" row updated...");


using positional parameter:-
---------------------------------

		EntityManager em= EMUtil.provideEntityManager();
		
		
		String jpql= "update Account set balance=balance+?5 where name=?6";
		
		Query q= em.createQuery(jpql);
		
		q.setParameter(5, 1000);
		q.setParameter(6, "Manoj");
		
		em.getTransaction().begin();
		int x=q.executeUpdate();
		em.getTransaction().commit();
		
		
		System.out.println(x+" record updated...");


--index value can start with any number...

using named parameter:-
----------------------------

		EntityManager em= EMUtil.provideEntityManager();
		
		
		String jpql= "update Account set balance=balance+:bal where name=:nm";
		
		Query q= em.createQuery(jpql);
		
		q.setParameter("bal", 600);
		q.setParameter("nm", "Ram");
		
		em.getTransaction().begin();
		int x=q.executeUpdate();
		em.getTransaction().commit();
		
		
		System.out.println(x+" record updated...");



1.--if we try to accees only one column then the return type will be :-

either String obj,
or any Wrapper class obj (Integer,Float)
or 
LocalDate 

2.--if all column then the return type will be the Entity class.(internally it will be mapped.)



3.if few columns then the return type will be Object[]. in this array each index will represent each column


ex:- for 1 row and 1 column:-

		EntityManager em= EMUtil.provideEntityManager();
		
		String jpql= "select name from Account where accno=:ano";
		
		TypedQuery<String> q=em.createQuery(jpql,String.class);
		
		q.setParameter("ano", 4);
		
		String n= q.getSingleResult();
		

		System.out.println(n);
		

ex: multiple row and 1 column:-
-------------------------------------

		EntityManager em= EMUtil.provideEntityManager();
		
		
		String jpql= "select balance from Account";
		
		TypedQuery<Integer> q=em.createQuery(jpql,Integer.class);
		
		List<Integer> list= q.getResultList();
		
		System.out.println(list);

ex3:- few column and all rows:-
-----------------------------------

	EntityManager em= EMUtil.provideEntityManager();
		
		
		String jpql= "select name,balance from Account";
		
		TypedQuery<Object[]> q=em.createQuery(jpql,Object[].class);
		
		List<Object[]> list= q.getResultList();
		

		for(Object[] or:list){
			
			String name=(String)or[0];
			System.out.println("Name is "+name.toUpperCase());
			System.out.println("Balance is "+or[1]);
			
			System.out.println("-------------------------");
			
		}
			
	}

aggregrate function:-
------------------------

--any aggregrate function will return :-

min,max, count: Integer
avg : Double
sum : Long


ex:-


		EntityManager em= EMUtil.provideEntityManager();
		
		
		String jpql= "select sum(balance) from Account";
		
		TypedQuery<Long> q=em.createQuery(jpql,Long.class);
		
		long result= q.getSingleResult();
		
		System.out.println(result);


Named Queries:-
============

ex:-


Account.java:- (Entity class):-
-----------------------------------



@Entity
@NamedQuery(name = "account.getBalance",query = "from Account where balance <:bal")
public class Account  {
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int accno;
	private String name;
	private int balance;







JPQLMain.java:-
------------------


public class JPQLMain {
	
	public static void main(String[] args) {
		
		EntityManager em= EMUtil.provideEntityManager();
		
		
		Query q= em.createNamedQuery("account.getBalance");
		
		q.setParameter("bal", 5000);
		
		List<Account> list= q.getResultList();
		
		list.forEach(a -> System.out.println(a));
		
	}

}



NativeQueries:-
============

--here we write the Query in the term of tables and their columns. (normal sql)



		EntityManager em= EMUtil.provideEntityManager();
		
		
		String nq="select * from account"; //here account is the table name
		
	 	Query q= em.createNativeQuery(nq, Account.class);
	
	 	List<Account> list= q.getResultList();
	 	
	 	list.forEach(a -> System.out.println(a));

	 	
NamedNativeQuery:-
------------------------

Account.java:-
-----------------


@Entity
@NamedNativeQuery(name="allAccount" ,query = "select * from account",resultClass=Account.class)
public class Account implements Serializable {
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int accno;
	private String name;
	private int balance;
	
--
--
}

JPQLMain.java:-
-------------------


public class JPQLMain {
	
	public static void main(String[] args) {
		
		EntityManager em= EMUtil.provideEntityManager();
		
	 	Query q= em.createNamedQuery("allAccount");
	
	 	List<Account> list= q.getResultList();
	 	
	 	list.forEach(a -> System.out.println(a));		
	}

}
	



Mismatched bt Object Oriented Representation and relational representaion of data:-
------------------------------------------------------------------------------------------------------

1.granularity mismatch :- HAS-A relationship problem

2.inheritence mismatch :- IS-A relationship problem

3.Association Mismatch :- table relationship problem





1.granularity mismatch :- HAS-A relationship problem:-
============================================

@Entity 
class Employee{  --corse grain

@Id
int eid;
String ename;
int salary

Address addr;

}


//this type of class is known as value class or normal class, it is not an Entity class


class Address{  --fine grain

String city;
String country;
String pincode;

}


an Entity can exist independently.


--at table level we don't have Has-A relationship. (it is Has-A relationship mismatch)


solution for the above HAS-A relation problem:-
---------------------------------------------------------

approach 1:-

--we need to create a table with all column (all for corse grain + all for fine grain classes)


apply @Embeddable at the top of Address class or @Embedded at the top of Address addr varible indside the Employee Entity.

ex:-



Address.java:-
-------------------


public class Address {
	
	private String state;
	private String city;
	private String pincode;
--
--	
}


Employee.java:-
-----------------


@Entity
public class Employee {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int eid;
	private String ename;
	private int salary;
	
	@Embedded
	private Address addr;  //here Address obj will be treated as value obj
--
--
--

}	
	
Demo.java:-
----------------

public class Demo {
	
	public static void main(String[] args) {
		
		EntityManager em= EMUtil.provideEntityManager();
		
		Employee emp=new Employee();
		emp.setEname("Ram");
		emp.setSalary(7800);
		emp.setAddr(new Address("Maharastra", "pune", "75455"));
		
		
		//Address adr=new Address("maharastra", "pune","75455");
		//emp.setAddr(adr);
		
		em.getTransaction().begin();
		
		em.persist(emp);
		
		em.getTransaction().commit();
		
		System.out.println("done...");
		
	}

}



--if we try to take 2 address (one for home and another for office ) and then try to persist the employee obj we will get exception "repeated column"

--we can solve this problem by overriding the column names of Embedded obj by using "@AttributeOverrides" annotation.

ex 2:-
=====

Employee.java:-
-------------------

@Entity
public class Employee {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int eid;
	private String ename;
	private int salary;
	
	@Embedded
	@AttributeOverrides({
		
		@AttributeOverride(name="state",column=@Column(name="HOME_STATE")),
		@AttributeOverride(name="city",column=@Column(name="HOME_CITY")),
		@AttributeOverride(name="pincode",column=@Column(name="HOME_PINCODE"))
		
	})
	private Address homeAddr;  
	
	@Embedded
	@AttributeOverrides({
		
		@AttributeOverride(name="state",column=@Column(name="OFFICE_STATE")),
		@AttributeOverride(name="city",column=@Column(name="OFFICE_CITY")),
		@AttributeOverride(name="pincode",column=@Column(name="OFFICE_PINCODE"))
		
	})
	private Address officeAddr; 
	
--
--
--

}

Demo.java:-
---------------


public class Demo {
	
	public static void main(String[] args) {
		
		EntityManager em= EMUtil.provideEntityManager();
		
		Employee emp=new Employee();
		emp.setEname("Ram");
		emp.setSalary(7800);
		emp.setHomeAddr(new Address("Maharastra", "pune", "75455"));
		emp.setOfficeAddr(new Address("Telengana","hydrabad", "785422"));
		
		
		em.getTransaction().begin();
		
		em.persist(emp);
		
		em.getTransaction().commit();
		
		System.out.println("done...");
		
	}

}


approach 2:- 
-------------

if any emp has more than two address then taking too many columns inside a table will violates the rules of normalization.

--to solve this problem we need to use @ElementCollection annotaion, and let the user add the multiple addresses using List or Set.

--in this case ORM s/w will generate a seperate table to maintain the addresses details with a Foreign key that reffers the PK of Employee table.


ex:-

Employee.java:-
------------------

	@Entity
	public class Employee {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int eid;
	private String ename;
	private int salary;
	
	@ElementCollection
	@Embedded
	private Set<Address> addresses=new HashSet<Address>();

	//
	}

Demo.java:-
--------------

public class Demo {
	
	public static void main(String[] args) {
		
		EntityManager em= EMUtil.provideEntityManager();
		
		Employee emp=new Employee();
		emp.setEname("Ram");
		emp.setSalary(7800);
		
		emp.getAddresses().add(new Address("st1", "ct1","78754"));
		emp.getAddresses().add(new Address("st2", "ct2","58754"));
		emp.getAddresses().add(new Address("st3", "ct3","98754"));
		emp.getAddresses().add(new Address("st4", "ct4","48754"));
		
		
		em.getTransaction().begin();
		
		em.persist(emp);
		
		em.getTransaction().commit();
		
		System.out.println("done...");
				
	}

}		
		
		
--when we execute the above application 2 tables will be created :-

1.employee :- which will contains only Employee details (it will not contains any details of any address)

2.employee_addresses  :- this table will contains the details of all the addresses with a FK column employee_eid which reffers the eid column of employee table.




Note:- if we want to change the 2nd table 'employee_addresses' and the FK column with our 
our choice name then we need to use @JoinTable  and @JoinColumn

ex:-


Employee.java:-
-------------------


@Entity
public class Employee {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int eid;
	private String ename;
	private int salary;
	
	@ElementCollection
	@Embedded
	@JoinTable(name="empaddress",joinColumns=@JoinColumn(name="emp_id"))
	private Set<Address> addresses=new HashSet<Address>();

	--
	--
	}
	
with the above example the 2nd table will be created by the name "empaddess" and the 
FK column will be by the name "emp_id".




